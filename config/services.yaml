# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    google_recaptcha_site_key: '%env(GOOGLE_RECAPTCHA_SITE_KEY)%'
    custom_mailer_address: '%env(MAIL_ADDRESS)%'
    custom_mailer_name: '%env(MAIL_NAME)%'

services:
    # default configuration for services in *this* file
    _defaults:
        bind:
            GuzzleHttp\ClientInterface $myClient: '@eight_points_guzzle.client.my_client'
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    App\Mailer\Mailer:
        arguments:
            $address: '%custom_mailer_address%'
            $name: '%custom_mailer_name%'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Mailer/'
            - '../src/Object/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\EventListener\PasswordEncodePrePersist:
        tags:
            - { name: doctrine.orm.entity_listener }
#                arguments: ['@security.password_encoder']
    App\EventListener\RegisterUserListener:
        tags:
            - { name: kernel.event_listener, event: app.user.registered, method: onRegisterUser }
    App\EventListener\RegisterUserPostListener:
        tags:
            - { name: kernel.event_listener, event: app.user.registered, method: onRegisterUser }
    admin.users:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~]

        tags:
            - { name: sonata.admin, manager_type: orm, group: Users, label: User }
    admin.projects:
        class: App\Admin\ProjectAdmin
        arguments: [ ~, App\Entity\Project, ~ ]

        tags:
            - { name: sonata.admin, manager_type: orm, group: Projects, label: Project }
    app.admin.statistic:
        class: App\Admin\StatisticAdmin
        arguments: [~, ~, App\Controller\Admin\StatisticAdminController]

        tags:
            - { name: sonata.admin, manager_type: orm, group: Statistics, label: Statistics }
    app.menu_listener:
        class: App\EventListener\MenuBuilderListener
        tags:
            - { name: kernel.event_listener, event: sonata.admin.event.configure.menu.sidebar, method: addMenuItems }
